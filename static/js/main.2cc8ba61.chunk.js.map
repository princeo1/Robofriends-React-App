{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAaeA,EAXJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACpB,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAG,+BAA0BJ,EAA1B,cACR,6BACA,4BAAKC,GACL,+BAAKC,EAAL,QCYaG,EAlBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEhB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GACnB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EACnBT,GAAIM,EAAOG,GAAGT,GACdC,KAAMK,EAAOG,GAAGR,KAChBC,MAAOI,EAAOG,GAAGP,aCKHS,EAdC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKT,UAAU,OACf,2BACCA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTAN,G,MAAS,CACpB,CACEN,GAAI,EACJC,KAAM,gBACNe,SAAU,OACVd,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNe,SAAU,YACVd,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNe,SAAU,WACVd,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNe,SAAU,WACVd,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNe,SAAU,SACVd,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNe,SAAU,mBACVd,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNe,SAAU,eACVd,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNe,SAAU,gBACVd,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNe,SAAU,WACVd,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNe,SAAU,iBACVd,MAAO,4BCtBIe,E,kDA5Bb,aAAc,IAAD,8BACX,gBAMFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SANxC,EAAKC,MAAM,CACXlB,OAAOA,EACPe,YAAY,IAJD,E,qDAYJ,IAAD,OAEAI,EAAeC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC5C,OAAOA,EAAOL,KAAK2B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAGnE,OACA,yBAAKzB,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWS,aAAcc,KAAKR,iBAC9B,kBAAC,EAAD,CAAUZ,OAAQmB,S,GAxBHK,aCKCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2cc8ba61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({id,name,email})=>{\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n\t\t<img src={`https://robohash.org/${id}?200*200`}/>\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p> {email} </p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots})=>{\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i)=>{\r\n\treturn (<Card key={i} \r\n\tid={robots[i].id} \r\n\tname={robots[i].name} \r\n\temail={robots[i].email}\r\n\t/>\r\n\t);\r\n})\r\n}\r\n   </div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input\r\n\t\t\tclassName='pa3 b2 b--green bg-lightest-blue'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React ,{Component}from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport {robots} from './robots';\n\n\nclass  App extends Component{\n\n  constructor(){\n    super();\n    this.state={\n    robots:robots,\n    searchfield:''\n    }\n  }\n  onSearchChange=(event)=>{\n    this.setState({searchfield:event.target.value})\n\n    }\n\n  render(){\n\n    const filteredRobots=this.state.robots.filter(robots=>{\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n\n    return (\n    <div className='tc'>\n    <h1>Robofriends</h1>\n    <SearchBox searchChange={this.onSearchChange}/>\n    <CardList robots={filteredRobots}/>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CardList from './CardList'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}